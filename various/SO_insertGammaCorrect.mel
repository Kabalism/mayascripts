//
// Simon Otter 2012.
// -----------------
// Do what the fuck you want with this. I place this script in the public domain where 
// applicable, if not, the first sentence applies.
//
// You can sell it, roll it, smoke it, deep fry it, wallpaper your room with it, print it
// out and fold it into a cute little hat, use it on the loo, etc.
//

//
// "SO_insertGammaCorrect" does the actual work.
// Call "SO_insertGammaCorrectTool" to get an UI.
//

//
// INSERTGAMMACORRECT COMMAND.
//

proc string[] SO_listAttributesByType(
	string $node,
	string $type)
{
	string $res[];

	for ($a in `listAttr -w -c $node`)
    {
    	string $t = "";
    	if (catchQuiet($t = `getAttr -type ($node + "." + $a)`))
    		continue;
    	if ($t == $type)
        	$res[size($res)] = $a;
    }

    return $res;
}

proc string[] SO_listMaterials()
{
	return `ls -mat`;
}

global proc SO_insertGammaCorrect(string $plug, float $gamma)
{
	string $node = plugNode($plug);
	string $attr = plugAttr($plug);

	if (!attributeExists($attr, $node))
	{
		error("Unknown attribute: " + $plug);
	}

	if (`connectionInfo -isDestination $plug`)
	{
		error("Attribute already connected to: " + `connectionInfo -sfd $plug`);
	}

	if (`getAttr -type $plug` != "float3")
		error("The destination attribute needs to be of type float3.");

	string $gcNode = `createNode gammaCorrect`;
	setAttr -type "float3" ($gcNode + ".gamma") $gamma $gamma $gamma;

	vector $v = `getAttr $plug`;
	setAttr -type "float3" ($gcNode + ".value") ($v.x) ($v.y) ($v.z);

	connectAttr ($gcNode + ".outValue") $plug;
}

//
// UI STUFF.
//

proc SO_updateAttributeList(string $v)
{
	menu -e -deleteAllItems "SO_insertGammaCorrectTool_al";
	for ($a in SO_listAttributesByType($v, "float3"))
	{
		menuItem -p "SO_insertGammaCorrectTool_al" -label $a;
	}
}

proc SO_createMaterialsMenu()
{
	optionMenu -label "Materials" -changeCommand "SO_updateAttributeList(\"#1\")" "SO_insertGammaCorrectTool_ml";
	for ($m in SO_listMaterials())
	{
		menuItem -label ($m);
	}
}

proc float SO_roundGamma(float $v)
{
	// Eliminate all but one decimal.
    return ceil($v * 10.0) / 10.0;
}

proc SO_updateGammaText(float $v)
{
	text -edit -label (SO_roundGamma($v)) "SO_insertGammaCorrectTool_gtx";
}

proc SO_insertGammaCorrectTool_doAction()
{
	string $n = `optionMenu -q -value "SO_insertGammaCorrectTool_ml"`;
	string $a = `optionMenu -q -value "SO_insertGammaCorrectTool_al"`;

	float $g = SO_roundGamma(`floatSlider -q -value "SO_insertGammaCorrectTool_gv"`);

	// Gamma is entered as the "gamma to correct for", but the gamma correct node
	// has the inverse relationship.
	SO_insertGammaCorrect($n + "." + $a, 1.0 / $g);
}

global proc SO_insertGammaCorrectTool()
{
	string $windowName = "SO_insertGammaCorrectTool_w";

	if (`window -ex $windowName`)
	{
		deleteUI $windowName;
	}

	window -title "Gamma Correct Colour" $windowName;

	columnLayout -adj 1;

		SO_createMaterialsMenu();

		optionMenu -label "Attribute" "SO_insertGammaCorrectTool_al";

		separator;

		rowLayout -adj 2 -nc 3;
			text -label "Source Gamma";
			floatSlider -min 0.1 -max 3.0 -v 2.2 -s 0.1 -dragCommand "SO_updateGammaText(#1)" "SO_insertGammaCorrectTool_gv";
			text -label "2.2" "SO_insertGammaCorrectTool_gtx";

		setParent ..;

		button -label "Create" -command "SO_insertGammaCorrectTool_doAction()";

	showWindow $windowName;

	window -edit -width 250 -height 1 $windowName;
}